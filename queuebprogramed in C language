#include <stdio.h>
#include <stdlib.h>

// Define the queue structure
#define MAX 5  // Max size of the queue

typedef struct Queue {
    int items[MAX];
    int front;
    int rear;
} Queue;

// Function to initialize the queue
void initQueue(Queue* q) {
    q->front = -1;
    q->rear = -1;
}

// Check if the queue is full
int isFull(Queue* q) {
    if (q->rear == MAX - 1) {
        return 1;  // Queue is full
    }
    return 0;
}

// Check if the queue is empty
int isEmpty(Queue* q) {
    if (q->front == -1 || q->front > q->rear) {
        return 1;  // Queue is empty
    }
    return 0;
}

// Enqueue function: Adds an element to the queue
void enqueue(Queue* q, int value) {
    if (isFull(q)) {
        printf("Queue is full! Cannot enqueue %d.\n", value);
    } else {
        if (q->front == -1) {
            q->front = 0;  // If the queue is initially empty, set front to 0
        }
        q->rear++;
        q->items[q->rear] = value;
        printf("Enqueued: %d\n", value);
    }
}

// Dequeue function: Removes and returns an element from the queue
int dequeue(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty! Cannot dequeue.\n");
        return -1;  // Indicate empty queue with -1
    } else {
        int dequeuedValue = q->items[q->front];
        q->front++;
        return dequeuedValue;
    }
}

// Function to display the queue
void display(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
    } else {
        printf("Queue: ");
        for (int i = q->front; i <= q->rear; i++) {
            printf("%d ", q->items[i]);
        }
        printf("\n");
    }
}

int main() {
    Queue q;
    initQueue(&q);  // Initialize the queue

    // Enqueue some elements
    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    enqueue(&q, 40);

   

    for (int i = 0; i < 2; i++) {  // Dequeue twice
    int dequeuedValue = dequeue(&q);
    if (dequeuedValue != -1) {
        printf("Dequeued: %d\n", dequeuedValue);
    }
}
    return 0;
}
